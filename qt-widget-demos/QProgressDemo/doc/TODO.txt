branch 0.4:
libqop


VERSION 0.3 TODO List


complete command parser and move option values into 1 class containing those static vars;

QTextBrowser for log viewing intergrated into EZProgressDialog

Add qmake for qt3 and mkspecs etc

QProcess controller. stop/resume
Lzma
add long option only, --time-format, --size --count --unit=size|count

UI:
1:(boost.any like)
we can reuse ezprogressdialog without any change
{
template<typename T>
ProgressUI(T* ui)
..
interfaces {hoder->interfaces}
..
class HolderBase {
interfaces = 0;
}
template<typename T> class Holder ::public HolderBase
{
interfaces
}
private:
	HolderBase *holder;
}

2: OPP
AbstractProgress
subclasses=>
PrpgressCLI, ProgressGUI


Parser: none-qobject like object, remove signals, ProgressUI instead (QThread is a problem)


VERSION 0.2 TODO List

QSocketNotifier is suck!

-T does not work

//todo use windows api get dir
BUG: EZProgressDialog::resizeButtons() is called for many times
Profiling
减少QString::operator+(), add macros for msg, extra_msg, using QString().sprintf()// or QString::arg() return &

KArchive
in another program:
compressProcess->setOutputProcess(qopProcess)
connect(qopProcess, SIGNAL(finished(int, QProcess::ExitStatus)), compressProcess, SLOT(terminate()));
//terminate() gui on windows
connect(qopProcess, SIGNAL(finished(int, QProcess::ExitStatus)), compressProcess, SLOT(kill()));


Qt2 QThread
ezlog
Like 7zG, Show Dir and filename in seperated lines

文档，使用说明
Help system
Test scripts

QArchiveInfo :QFileInfo
callBack

QTextBrowser: error viewer

EZProgressDialog Q_D() etc

QSocket 对qop与qprocess间进行通信。
EZProgressDialog::socket()

Error Handler
Port Qt4 QProcess to Qt2 Qt3
read all stdout then parse line by line
or read all then parse the last line
internal tar Chinese support, QProcess env

file permisson

FIXME:
-C command: sometimes taroutparser unit error

libqop.so

Using QProcess:
	QByteArray data = qprocess->readAllStandardOutput();
	QString line = data.constData();

	qop->parseLine(line);

QSocketNotifier
	QProcess::terminate() in filemanager


//////////////////////////////////////////////////////////////////

function ptr replace signal/slot, use macros

qt2.x 3.x线程间无法进行signal-slot消息传递，导致各消息循环相独立的loop, 通讯的唯一方式global state+ mutex lock

Change macros to typedef!

ISO Edit (ISOMaster)
Archieve Mounter

Endian: busybox/include/platform.h
kill 7z in Windows
read archieve header
built-in untar
check password by reading file header
Testing scripts
build shared library qopCui.so
operate on stream

support both STL and Qt
Finish message

program options: -stdin -stdout - --verbose

template QOutParser
pthread instead of QThread

//#define TEST_MYOPT 0
#if TEST_MYOPT
typedef void* (*do_func)();
enum ArgumentFlag {
	NoArgument=0,RequiredArgument,OptinalArgument
};

struct QOptionsPrivate
{
	const char* long_opt;
	char opt;
	QAny value;
	ArgumentFlag arg_flag;
	const char* description;
	do_func func_ptr;

};

class QOptions
{
public:
	QOptions(int argc,char** argv);
	~QOptions();

	QOptions& operator()(const char* name,const QAny& value,const char* description=0);
	QOptions& operator()(const char* name,const char* description=0);
	QAny& operator[](const char* name);

	void readCommand(int argc,char** argv);
	void doOptions();

private:
	QList<QOptionsPrivate*> opts, opts_in;

};
#endif //TEST_MYOPT
/*!

  TODO:
	-v --verbose
	stderr
	input password
  tar cvf: count the number of files, also estimate left time, speed files/s--------------X
  need 1 more timer to estimate when time out----------------------------------------------X
  display size/number left----------------------------------------------X
  consol mode

			_out="<H3><font color=#0000ff>"+file+"</font></H3><left>"+tr("Size: ")+size2str(size) \
				 +"</left><br><left>"+tr("Processed: ")+size2str(value)+" / "+max_str+"</left><br>";
			Rich text takes much more time


	Format --> TarVerbose TarQuite ... EndZip 7zEnd

	7z l archieve
	7z counts files exclude dirs----------------------------------------------X
	kill 7z

	Processed: files/files----------------------------------------------X


	template<typename T1,typename T2,typename T3>
	class OutputFormat {
	OutputFormat() {map_addr()];
	const char* fmt,
	char *keyword[16];
	T1 argv1;
	T2 argv2;
	T3 argv3;

	map_addr(void* ptr1,void* ptr2,void* ptr3);//T1, T2, T3-->&size,name,rate
	}


	//QMap<const QString& type,struct OutputFormat ofmt>

	getParser(const QString&) {
	new QOutParser
	//ref to boost.any
	setOutputFormat()
	}

	parse()

	class LineFormat {
	public:
		virtual ~LineFormat()=0;
		char* format;
		QStringList keyword, keyword_unkown;
		QString keyword_err;
	}

	template<typename T1,typename T2,typename T3>
	class LineFormatArc :public LineFormat {
		void map_addr(T1* ptr1,T2* ptr2,T3* ptr3) {
			argv1=ptr1,argv2=ptr2,argv3=ptr3;
		}
	private:
		T1 argv1; //ptr
		T2 argv2;
		T3 argv3;

	}


	class QOutParser {
	...
	private:
		char name[256], r[8];
		int s;
		LineFormat *line_fmt;
	}

	QOutParser::setLineFormat(const QString& type)
	{
		if(type=="tar") { line_fmt=new LineFormatArc<int,char*,char*>();lf.map_addr(*s,name,null);
		keyword<<""<<...;}
		...

	}

	QOutParser::parse() {
		bool kw_found=false;
		it //keyword
		for(it) {
			if(line.contains(*it) {kw_found=true;break;}
		}
		if(!kw_found) return Unknow;
		else { fprintf(line,line_fmt.format,line_fmt.argv1...);
			file=...
			...
		}
	}

	main.cpp:
		QOutParser *qop=new QOutParser;
		qop->setFormat(type);

		qop->parse()


*/
GUI:
1.mark items to remove/extract
2.7z Gui. Use 7z lib directly!


